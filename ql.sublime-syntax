%YAML 1.2
---
name: QL
file_extensions: [ql,qll]
scope: source.QL

contexts:
  main:
    - match: \b(import)[ ]
      scope: keyword.other
      push: qualid
    - match: \b(boolean|date|float|int|string)\b
      scope: storage.type
    - match: \b(@[a-z][a-zA-Z0-9_]*)\b
      scope: support.type
    - match: \b(or|and|not|implies|if|then|else|=|!=|<|>|<=|>=|instanceof|+|-|*|/|%)\b
      scope: keyword.operator
    - match: \b(false|true)\b
      scope: constant.language
    - match: \b(this|result|super)\b
      scope: variable.language
    - match: '"'
      push: string
    - match: '//'
      scope: punctuation.definition.comment
      push: line_comment
    - match: '/\*'
      scope: punctuation.definition.comment
      push: block_comment
    - match: '(abstract|cache|external|final|library|noopt|private|deprecated)'
      scope: storage.modifier
    - match: \b(any|exists|forall|forex|none)\b
      scope: keyword.quantifier
    - match: \b(as|class|extends|from|import|in|module|newtype|predicate)\b
      scope: keyword.other
    - match: \b(asc|by|desc|order)\b
      scope: keyword.order
    - match: \b(avg|concat|count|max|min|rank|strictconcat|strictcount|strictsum|sum)\b
      scope: keyword.aggregate
    - match: \b(select|where)\b
      scope: keyword.query
    - match: \b_\b
      scope: variable.language.dont-care.ql
    - match: '::'
      scope: punctuation.accessor
    - match: '\b[0-9A-Za-z_]\b'
      scope: variable.id_character

    # Add highlight mismatching brackets
    - match: \(\{
      push: brackets
    - match: \)\}
      scope: invalid.illegal.stray-bracket-end

  brackets:
    - match: \)\}
      pop: true
    - include: main

  qualid:
    - meta_scope: meta.qualid
    - match: '[a-zA-Z0-9_.]'
    - match: (.|\n)
      pop: true

  string:
    - meta_scope: string.quoted.double
    - match: '\\(\\|"|n|r|t)'
      scope: constant.character.escape
    - match: '(\\|\n|\t|\r)'
      scope: invalid.illegal
    - match: '"'
      pop: true

  line_comment:
    - meta_scope: comment.line
    - match: $
      pop: true

  block_comment:
    - meta_scope: comment.block
    - match: '\*/'
      scope: punctuation.definition.comment
      pop: true



# entity.name
# entity.other.inherited-class
# entity.name.section
# entity.name.tag
# entity.other.attribute-name
# variable
# variable.language
# variable.parameter
# variable.function
# constant
# constant.numeric
# constant.language
# constant.character.escape
# storage.type
# storage.modifier
# support
# keyword
# keyword.control
# keyword.operator
# keyword.declaration
# string
# comment
# invalid
# invalid.deprecated